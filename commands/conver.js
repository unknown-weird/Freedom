let Discord = require('discord.js');
let cfg = require('../config.json');
exports.run = async (client, message, args, error, succ, Users, Guilds) => {
    if(message.channel.id == '548899664544399389') return error('–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ <#556453541179293696>.', message)
  if(!Users.get(message.author.id)) return error(`–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å **-account**`, message)
  let guild = Guilds.get('guilds')
  let embed = new Discord.RichEmbed()
  .setTitle(`–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã`)
  .setDescription(`–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –ø–æ —Ä–µ–∞–∫—Ü–∏–∏.
:euro: - —Å **–§–ö –≤ –µ–≤—Ä–æ**
${cfg.fc} - —Å **–µ–≤—Ä–æ –≤ –§–ö**`)
.addField(`–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –µ–≤—Ä–æ –∏ –≤—Ä–µ–º—è:`, `**${guild.info.euro.course}** ${cfg.fc} –∑–∞ **1** :euro:, –æ—Å—Ç–∞–ª–æ—Å—å **${require('../functions/timer.js').timer(guild.info.euro.time, ['–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç'])}**.`)
.setColor('GREEN')
.setFooter(`–õ–∏–º–∏—Ç: 200 –µ–≤—Ä–æ –∏ 20.000 –§–ö`, client.user.avatarURL)
.setTimestamp()
if(!args.join("")) return message.channel.send(embed).then(async msg => {
let eblan;
msg.react("üí∂").then(async e => {
await msg.react("671734965645475840").then(m => eblan = m)
let fcf = (react, user) => react.emoji.id === '671734965645475840' && user.id === message.author.id;
let goFilt = (react, user) => react.emoji.name === 'üí∂' && user.id === message.author.id;
setTimeout(() => {
eblan.remove(), e.remove();
}, 60000)
let fc = msg.createReactionCollector(fcf, {time: 60000})
let euros = msg.createReactionCollector(goFilt, {time: 60000})
fc.on("collect", async r => {
r.remove() && r.remove(message.author.id)
fc.stop();
euros.stop();
let msg = await message.channel.send(`–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ **–µ–≤—Ä–æ** –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ **–∫–æ–∏–Ω—ã**. (–æ—Ç 1 –¥–æ 200)`)
let channel = msg.channel;
let collector = channel.createMessageCollector(m => m.author.id == message.author.id, {time: 120000});
collector.on('collect', message => {
    let mc = message.content.replace(/' '/g, '')
    let euro = Users.get(message.author.id, 'info.balances.euro')
    if(isNaN(mc)) return error('–≠—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.', message), collector.stop();
    if(euro < 1) return error('–£ –í–∞—Å –Ω–µ—Ç –µ–≤—Ä–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.', message), collector.stop();
    if(euro - 1*mc < 0) return error(`–£ –í–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –µ–≤—Ä–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –°–µ–π—á–∞—Å —É –≤–∞—Å **${euro}** :euro:`, message), collector.stop();
    if(mc < 1) return error('–ù–µ–ª—å–∑—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—å—à–µ 1 :euro:.', message), collector.stop();
    if(mc > 200) return error('–ó–∞ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–µ –±–æ–ª–µ–µ 200 :euro:.', message), collector.stop();
    succ(`–í—ã —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ **${Number(mc).toFixed(2)}** :euro: –≤ **${Number(mc*guild.info.euro.course).toFixed(2)}** ${cfg.fc}.`, message), collector.stop();
    Users.math(message.author.id, '+', Number(mc*guild.info.euro.course), 'info.balances.money')
    Users.math(message.author.id, '-', Number(mc), 'info.balances.euro')
});
});
euros.on("collect", async r => {
r.remove() && r.remove(message.author.id)
euros.stop();
fc.stop();
let msg = await message.channel.send(`–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ **–µ–≤—Ä–æ**, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å **–∫–æ–∏–Ω—ã —É–º–Ω–æ–∂–µ–Ω–Ω—ã–µ –Ω–∞ –∫—É—Ä—Å**. (–æ—Ç 1 –¥–æ 200)`)
let channel = msg.channel;
let collector = channel.createMessageCollector(m => m.author.id == message.author.id, {time: 120000});
collector.on('collect', message => {
    let mc = message.content.replace(/' '/g, '')
    let money = Users.get(message.author.id, 'info.balances.money')
    if(isNaN(mc)) return error('–≠—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.', message), collector.stop();
    if(money < 100) return error('–£ –í–∞—Å –Ω–µ—Ç –∫–æ–∏–Ω–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.', message), collector.stop();
    if(money - guild.info.euro.course*mc < 0) return error(`–£ –í–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–æ–∏–Ω–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –°–µ–π—á–∞—Å —É –≤–∞—Å **${money.toFixed(2)}** ${cfg.fc}`, message), collector.stop();
    if(mc < 1) return error(`–ù–µ–ª—å–∑—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—å—à–µ 100 ${cfg.fc}.`, message), collector.stop();
    if(mc > 200) return error(`–ó–∞ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–µ –±–æ–ª–µ–µ 20.000 ${cfg.fc}.`, message), collector.stop();
    succ(`–í—ã —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ **${Number(mc*guild.info.euro.course).toFixed(2)}** ${cfg.fc} –≤ **${Number(mc).toFixed(2)}** :euro:.`, message), collector.stop();
    Users.math(message.author.id, '+', Number(mc), 'info.balances.euro')
    Users.math(message.author.id, '-', Number(mc*guild.info.euro.course), 'info.balances.money')
});
});
});
});
}
exports.help = {
    name: ["convert", "conver", "cr"],
    d: "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∞–ª—é—Ç—É.",
    u: "conver"
}